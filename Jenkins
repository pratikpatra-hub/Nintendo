pipeline {
    agent any

    environment {
        IMAGE_NAME = 'your-dockerhub-username/python-app'
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials' // Set in Jenkins
        SONAR_HOST_URL = 'http://localhost:9000'
        SONAR_LOGIN = credentials('sonar-token') // Set this in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/your-repo/python-app.git'
                    COMMIT_HASH = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    IMAGE_TAG = "${IMAGE_NAME}:${COMMIT_HASH}"
                }
            }
        }

        stage('Build & Install Dependencies') {
            steps {
                script {
                    sh 'pip install -r requirements.txt'
                }
            }
        }

        stage('Run Unit Tests') {
            steps {
                script {
                    sh 'pytest --junitxml=report.xml --cov=. --cov-report=xml'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    sh """
                        sonar-scanner \
                        -Dsonar.projectKey=PythonApp \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_LOGIN \
                        -Dsonar.python.coverage.reportPaths=coverage.xml
                    """
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    sh "docker build -t ${IMAGE_TAG} ."
                }
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                            docker tag ${IMAGE_TAG} ${IMAGE_NAME}:latest
                            docker push ${IMAGE_TAG}
                            docker push ${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "Cleaning up local Docker images..."
                    sh "docker rmi ${IMAGE_TAG} || true"
                }
            }
        }
    }
}

